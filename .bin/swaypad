#!/usr/bin/env bash

was_fullscreen=$(swaymsg -t get_tree | jq '.. | objects | select(.focused == true) | .fullscreen_mode')
window_info=$(
  swaymsg -t get_tree | jq -r '
  .. | objects | select(.focused == true) .id
'
)

# verify if file with the info exists

# check if the window was fullscreen previous and, if so, send window info to file
if [[ "$was_fullscreen" == 1 ]]; then
  echo $window_info >/tmp/prev_fullscreen_window_id
fi

#swaypad.py -s sma -p 'top-left' -c 'foot -a todo -e taskwarrior-tui' -n 'todo'
#swaypad.py "$@"

while getopts "n:C:h:w:p:c:" opt; do
  case "$opt" in
  n) name="$OPTARG" ;;
  C) class="$OPTARG" ;;
  w) width="$OPTARG" ;;
  h) height="$OPTARG" ;;
  p) position="$OPTARG" ;;
  c) command="$OPTARG" ;;
  *)
    echo "Uso: $0 [-n name | -C class] -c comando"
    exit 1
    ;;
  esac
done

screen_height=$(swaymsg -t get_outputs | jq '.[] | select(.active) | .current_mode.height')
screen_width=$(swaymsg -t get_outputs | jq '.[] | select(.active) | .current_mode.width')
resize_width=$(echo $screen_width*$width | bc | cut -d'.' -f1)
resize_height=$(echo $screen_height*$height | bc | cut -d'.' -f1)

if [[ -z "$command" ]]; then
  echo "Err: -c (command) is required"
  exit 1
else
  if [[ -z "$name" ]]; then
    if [[ -z "$class" ]]; then
      echo "Name or Class need to be passed as arguments"
      exit 1
    fi
  fi
fi

case "$position" in
top)
  x=$(((screen_width - resize_width) / 2))
  position_set="$x 0"
  ;;
center)
  x=$(((screen_width - resize_width) / 2))
  y=$(((screen_height - resize_height) / 2))
  position_set="$x $y"
  ;;
top_left)
  position_set="0 0"
  ;;
top_right)
  x=$(((screen_width - resize_width)))
  position_set="$x 0"
  ;;
*)
  echo "no"
  ;;
esac

if [[ -z "$class" ]]; then
  match_info=app_id="$name"
else
  match_info=class="$class"
fi

function inactive_scratch() {
  echo "opening scratchpad"
  nohup $command &
  sleep 0.4
  while [[ true ]]; do
    # change floating name to something else
    echo "trying to get window app_id"
    is_floating=$(swaymsg -t get_tree | jq -r --arg name "$name" '.. | objects | select(.app_id == $name) | .scratchpad_state')
    if [[ -z "$is_floating" ]]; then
      echo "trying to get window class instead"
      is_floating=$(swaymsg -t get_tree | jq -r --arg class "$class" '
        .. | objects
        | select(.window_properties?.class == $class)
        | .scratchpad_state
      ')
    fi
    echo "window info is: $is_floating"
    echo "match info is: $match_info"

    if [[ "$is_floating" == "fresh" ]]; then
      echo "exiting loop since scratchpad is already present."
      break
    else
      echo "moving $match_info to scratch"
      swaymsg "[$match_info] move scratchpad"
      sleep 0.2
      echo "open scratch"
      swaymsg "[$match_info] resize set $resize_width $resize_height"
      swaymsg "[$match_info] move position $position_set"
      swaymsg "[$match_info] scratchpad show"
    fi
    sleep 0.2
  done
}

# resize it depending on screen witdh and height using %.
swaymsg "[$match_info] resize set $resize_width $resize_height"
swaymsg "[$match_info] move position $position_set"
# set it's position of screen.

echo "$position_set"
swaymsg "[$match_info] scratchpad show" || inactive_scratch
